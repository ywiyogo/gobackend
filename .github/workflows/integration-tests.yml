name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Security scanning job
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.7

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: go

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # Dependency vulnerability scanning
  vulnerability-scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.7

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif ./...'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec.sarif

  # Linting and code quality
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.7

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Install golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m

    - name: Check Go formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not properly formatted:"
          gofmt -s -l .
          exit 1
        fi

    - name: Check Go modules
      run: |
        go mod tidy
        if ! git diff --quiet go.mod go.sum; then
          echo "go.mod or go.sum is not up to date"
          git diff go.mod go.sum
          exit 1
        fi

  # Unit tests with matrix strategy
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.23', '1.24']
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.7

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Install SQLC
      run: go install github.com/sqlc-dev/sqlc/cmd/sqlc@latest

    - name: Generate database code
      run: sqlc generate

    - name: Download dependencies
      run: go mod download

    - name: Run unit tests with coverage
      run: |
        go test -race -coverprofile=coverage.out -covermode=atomic ./internal/...
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-go${{ matrix.go-version }}
        path: |
          coverage.out
          coverage.html
        retention-days: 7

  # Integration tests with comprehensive testing
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres2025
          POSTGRES_DB: gobackend
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        auth-mode: [password, otp]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.7

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Install dependencies
      run: |
        go install github.com/sqlc-dev/sqlc/cmd/sqlc@latest
        go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Create test environment file
      run: |
        cat > .env << EOF
        DB_USER=postgres
        DB_PASSWORD=postgres2025
        DB_NAME=gobackend
        DB_HOST=localhost
        DB_PORT=5432
        OTP_ENABLED=${{ matrix.auth-mode == 'otp' && 'true' || 'false' }}
        ENV=development
        EOF

    - name: Generate database code
      run: sqlc generate

    - name: Download dependencies
      run: go mod download

    - name: Wait for PostgreSQL
      run: |
        timeout 60 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do 
          echo "Waiting for PostgreSQL..."
          sleep 2
        done'

    - name: Run database migrations
      run: |
        migrate -path internal/db/migrations -database "postgres://postgres:postgres2025@localhost:5432/gobackend?sslmode=disable" up

    - name: Test database connection
      run: |
        PGPASSWORD=postgres2025 psql -h localhost -p 5432 -U postgres -d gobackend -c "SELECT 1;"

    - name: Run integration tests with coverage
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: postgres2025
        DB_NAME: gobackend
        OTP_ENABLED: ${{ matrix.auth-mode == 'otp' && 'true' || 'false' }}
        ENV: development
      run: |
        go test -v -race -coverprofile=integration-coverage.out -covermode=atomic ./test/...

    - name: Upload integration test coverage
      uses: actions/upload-artifact@v4
      with:
        name: integration-coverage-${{ matrix.auth-mode }}
        path: integration-coverage.out
        retention-days: 7

  # Build and test Docker image
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.7

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: false
        tags: gobackend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm --name test-container -d -p 8080:8080 \
          -e DB_HOST=host.docker.internal \
          -e DB_PORT=5432 \
          -e DB_USER=test \
          -e DB_PASSWORD=test \
          -e DB_NAME=test \
          -e OTP_ENABLED=false \
          -e ENV=development \
          gobackend:test || true
        sleep 5
        docker logs test-container || true
        docker stop test-container || true

  # Performance benchmarks
  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.7

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Install SQLC
      run: go install github.com/sqlc-dev/sqlc/cmd/sqlc@latest

    - name: Generate database code
      run: sqlc generate

    - name: Run benchmarks
      run: |
        go test -bench=. -benchmem ./internal/... > benchmark-results.txt

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark-results.txt
        retention-days: 30

  # Comprehensive test summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [security, vulnerability-scan, lint, unit-tests, integration-tests, docker-build]
    if: always()
    steps:
    - name: Check test results
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Vulnerability Scan | ${{ needs.vulnerability-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Lint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Build | ${{ needs.docker-build.result }} |" >> $GITHUB_STEP_SUMMARY

    - name: Report failure
      if: contains(needs.*.result, 'failure')
      run: |
        echo "❌ Some tests failed. Please check the individual job results." >> $GITHUB_STEP_SUMMARY
        exit 1

    - name: Report success
      if: contains(needs.*.result, 'failure') == false
      run: |
        echo "✅ All tests passed successfully!" >> $GITHUB_STEP_SUMMARY