name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Pre-release security and quality checks
  pre-release-checks:
    name: Pre-Release Security & Quality Checks
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.7
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Install dependencies
      run: |
        go install github.com/sqlc-dev/sqlc/cmd/sqlc@latest
        go mod download

    - name: Generate database code
      run: sqlc generate

    - name: Run security scan
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif ./...'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec.sarif

    - name: Run tests
      run: |
        go test -race -v ./internal/...

    - name: Check vulnerabilities
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

  # Build binaries for multiple platforms
  build-binaries:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    needs: pre-release-checks
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: ''
          - goos: linux
            goarch: arm64
            suffix: ''
          - goos: darwin
            goarch: amd64
            suffix: ''
          - goos: darwin
            goarch: arm64
            suffix: ''
          - goos: windows
            goarch: amd64
            suffix: '.exe'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.7

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Install SQLC
      run: go install github.com/sqlc-dev/sqlc/cmd/sqlc@latest

    - name: Generate database code
      run: sqlc generate

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        go build -ldflags="-w -s -X main.version=${{ steps.version.outputs.version }}" \
          -o gobackend-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }} \
          main.go

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: gobackend-${{ matrix.goos }}-${{ matrix.goarch }}
        path: gobackend-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }}
        retention-days: 7

  # Build and push Docker image
  build-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: pre-release-checks
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.7

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: sbom.spdx.json
        retention-days: 30

  # Run integration tests against built artifacts
  integration-test:
    name: Integration Test Release Build
    runs-on: ubuntu-latest
    needs: [build-binaries, build-docker]
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres2025
          POSTGRES_DB: gobackend
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.7

    - name: Download Linux binary
      uses: actions/download-artifact@v4
      with:
        name: gobackend-linux-amd64
        path: ./

    - name: Make binary executable
      run: chmod +x gobackend-linux-amd64

    - name: Install migrate tool
      run: |
        go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest

    - name: Setup test environment
      run: |
        cat > .env << EOF
        DB_USER=postgres
        DB_PASSWORD=postgres2025
        DB_NAME=gobackend
        DB_HOST=localhost
        DB_PORT=5432
        OTP_ENABLED=false
        ENV=development
        EOF

    - name: Run database migrations
      run: |
        migrate -path internal/db/migrations -database "postgres://postgres:postgres2025@localhost:5432/gobackend?sslmode=disable" up

    - name: Test binary execution
      run: |
        timeout 10s ./gobackend-linux-amd64 || [ $? -eq 124 ]

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-binaries, build-docker, integration-test]
    permissions:
      contents: write
      packages: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.7
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        echo "## 🚀 What's New in ${{ steps.version.outputs.version }}" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        
        if [ -n "$PREV_TAG" ]; then
          echo "### 📋 Changes since $PREV_TAG" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> CHANGELOG.md
        else
          echo "### 📋 Initial Release" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "- 🎉 First release of Go Backend" >> CHANGELOG.md
        fi
        
        echo "" >> CHANGELOG.md
        echo "### 🔧 Technical Details" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "- **Go Version**: $(go version | cut -d' ' -f3)" >> CHANGELOG.md
        echo "- **Build Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> CHANGELOG.md
        echo "- **Commit SHA**: ${{ github.sha }}" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### 📦 Available Downloads" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "- **Docker Image**: \`ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}\`" >> CHANGELOG.md
        echo "- **Binaries**: Available for Linux, macOS, and Windows (amd64/arm64)" >> CHANGELOG.md

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find ./artifacts -name "gobackend-*" -type f -exec cp {} release-assets/ \;
        
        # Create checksums
        cd release-assets
        sha256sum * > checksums.txt
        cd ..
        
        # Copy SBOM if available
        if [ -f "./artifacts/sbom/sbom.spdx.json" ]; then
          cp "./artifacts/sbom/sbom.spdx.json" release-assets/
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        body_path: CHANGELOG.md
        files: |
          release-assets/*
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, 'rc') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'alpha') }}
        generate_release_notes: true

  # Deploy to staging (optional)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: create-release
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    environment:
      name: staging
      url: https://staging.your-domain.com
    steps:
    - name: Deploy notification
      run: |
        echo "🚀 Deploying ${{ needs.create-release.outputs.tag }} to staging environment"
        echo "Docker image: ghcr.io/${{ github.repository }}:${{ github.ref_name }}"
        
        # Add your deployment logic here
        # This could be:
        # - Kubernetes deployment
        # - Docker Compose update
        # - Cloud provider deployment
        # - Terraform apply
        
        echo "✅ Staging deployment completed"

  # Security scan of released image
  security-scan-release:
    name: Security Scan Released Image
    runs-on: ubuntu-latest
    needs: build-docker
    permissions:
      security-events: write
    steps:
    - name: Get image tag
      id: image
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Scan Docker image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.image.outputs.tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Notify teams about the release
  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, deploy-staging]
    if: always() && needs.create-release.result == 'success'
    steps:
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Create release summary
      run: |
        echo "## 🎉 Release ${{ steps.version.outputs.version }} Published!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Release Assets" >> $GITHUB_STEP_SUMMARY
        echo "- **GitHub Release**: [View Release](https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }})" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker Image**: \`ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Deployment Status" >> $GITHUB_STEP_SUMMARY
        echo "- **Staging**: ${{ needs.deploy-staging.result == 'success' && '✅ Deployed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [Release Notes](https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Docker Pull Command](https://github.com/${{ github.repository }}/pkgs/container/${{ github.event.repository.name }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Documentation](https://github.com/${{ github.repository }}/blob/main/README.md)" >> $GITHUB_STEP_SUMMARY

    # Add Slack/Discord/Teams notification here if needed
    # - name: Notify Slack
    #   uses: 8398a7/action-slack@v3
    #   with:
    #     status: success
    #     text: "🎉 New release ${{ steps.version.outputs.version }} is now available!"
    #   env:
    #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}